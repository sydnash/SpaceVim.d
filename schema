{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"description": "Configuration file for coc.nvim",
	"additionalProperties": false,
	"definitions": {
		"float": {
			"type": "object",
			"properties": {
				"border": {
					"type": "boolean",
					"default": false,
					"description": "Set to true to use borders."
				},
				"highlight": {
					"type": "string",
					"default": "CocFloating",
					"description": "Background highlight group of float window."
				},
				"title": {
					"type": "string",
					"default": "",
					"description": "Title used by float window."
				},
				"borderhighlight": {
					"type": "string",
					"default": "CocFloating",
					"description": "Border highlight group of float window."
				},
				"close": {
					"type": "boolean",
					"default": false,
					"description": "Set to true to draw close icon"
				},
				"maxWidth": {
					"type": "integer",
					"description": "Maximum width of float window, include border."
				},
				"maxHeight": {
					"type": "integer",
					"minimum": 2,
					"description": "Maximum height of float window, include border."
				},
				"focusable": {
					"type": "boolean",
					"default": true,
					"description": "Enable focus by user actions (wincmds, mouse events), neovim only."
				},
				"shadow": {
					"type": "boolean",
					"default": false,
					"description": "Drop shadow effect by blending with the background, neovim only."
				},
				"winblend": {
					"type": "integer",
					"default": 0,
					"minimum": 0,
					"maximum": 100,
					"description": "Enables pseudo-transparency by set 'winblend' option of window, neovim only."
				}
			}
		},
		"languageServerBase": {
			"type": "object",
			"properties": {
				"enable": {
					"type": "boolean",
					"default": true
				},
				"cwd": {
					"type": "string",
					"default": "",
					"description": "Working directory of languageserver, absolute path or relative to workspace folder, use workspace root by default"
				},
				"disableDynamicRegister": {
					"type": "boolean",
					"default": false,
					"description": "Disable dynamic registerCapability feature for this languageserver to avoid duplicated feature regstration."
				},
				"disableWorkspaceFolders": {
					"type": "boolean",
					"default": false,
					"description": "Disable workspaceFolders feature for this languageserver."
				},
				"disableSnippetCompletion": {
					"type": "boolean",
					"default": false,
					"description": "Disable completion snippet feature for this languageserver, the languageserver may not respect it."
				},
				"disableDiagnostics": {
					"type": "boolean",
					"default": false,
					"description": "Disable handle diagnostics for this languageserver."
				},
				"disableCompletion": {
					"type": "boolean",
					"default": false,
					"description": "Disable completion feature for this languageserver."
				},
				"formatterPriority": {
					"type": "number",
					"default": 0,
					"description": "Priority of this languageserver's fomatter."
				},
				"env": {
					"type": "object",
					"default": null,
					"description": "Environment variables for child process."
				},
				"stdioEncoding": {
					"type": "string",
					"default": "utf8",
					"description": "Encoding used for stdio of child process."
				},
				"rootPatterns": {
					"type": "array",
					"default": [],
					"description": "Root patterns used to resolve rootPath from current file, default to workspace root",
					"items": {
						"type": "string"
					}
				},
				"requireRootPattern": {
					"type": "boolean",
					"default": false,
					"description": "If true, doesn't start server when root pattern not found."
				},
				"ignoredRootPaths": {
					"type": "array",
					"default": [],
					"description": "Absolute root paths that language server should not use as rootPath, higher priority than rootPatterns.",
					"items": {
						"type": "string"
					}
				},
				"filetypes": {
					"type": "array",
					"default": [],
					"description": "Supported filetypes, add * in array for all filetypes.",
					"items": {
						"type": "string"
					}
				},
				"additionalSchemes": {
					"type": "array",
					"default": [],
					"description": "Additional uri schemes, default schemes including file & untitled.",
					"items": {
						"type": "string"
					}
				},
				"revealOutputChannelOn": {
					"type": "string",
					"default": "never",
					"description": "Configure message level to show the output channel buffer",
					"enum": ["info", "warn", "error", "never"]
				},
				"progressOnInitialization": {
					"type": "boolean",
					"default": true,
					"description": "Enable progress report on languageserver initialize."
				},
				"initializationOptions": {
					"type": "object",
					"default": {},
					"description": "initializationOptions passed to languageserver"
				},
				"settings": {
					"type": "object",
					"default": {},
					"description": "Settings of languageserver"
				},
				"trace.server": {
					"type": "string",
					"default": "off",
					"enum": ["off", "messages", "verbose"],
					"description": "Trace level of communication between server and client"
				}
			}
		},
		"languageServerSocket": {
			"type": "object",
			"allOf": [{
				"$ref": "#/definitions/languageServerBase"
			}],
			"required": ["port", "filetypes"],
			"additionalProperties": false,
			"properties": {
				"port": {
					"type": "integer",
					"description": "Port number of socket server"
				},
				"host": {
					"type": "string",
					"default": "127.0.0.1",
					"description": "Host of server"
				},
				"disableWorkspaceFolders": {},
				"disableSnippetCompletion": {},
				"disableDynamicRegister": {},
				"disableDiagnostics": {},
				"disableCompletion": {},
				"formatterPriority": {},
				"enable": {},
				"rootPatterns": {},
				"requireRootPattern": {},
				"ignoredRootPaths": {},
				"filetypes": {},
				"additionalSchemes": {},
				"revealOutputChannelOn": {},
				"progressOnInitialization": {},
				"initializationOptions": {},
				"settings": {},
				"stdioEncoding": {},
				"trace.server": {}
			}
		},
		"languageServerModule": {
			"type": "object",
			"allOf": [{
				"$ref": "#/definitions/languageServerBase"
			}],
			"required": ["module", "filetypes"],
			"additionalProperties": false,
			"properties": {
				"module": {
					"type": "string",
					"default": "",
					"description": "Absolute path of javascript file, should works in IPC mode"
				},
				"args": {
					"type": "array",
					"default": [],
					"description": "Extra arguments of module",
					"items": {
						"type": "string"
					}
				},
				"runtime": {
					"type": "string",
					"default": "",
					"description": "Absolute path of node runtime."
				},
				"execArgv": {
					"type": "array",
					"default": [],
					"description": "Argv passed to node when using module, normally used for debugging, ex: [\"--nolazy\", \"--inspect-brk=6045\"]",
					"items": {
						"type": "string"
					}
				},
				"transport": {
					"type": "string",
					"default": "ipc",
					"description": "Transport kind used by server, could be 'ipc', 'stdio', 'socket' and 'pipe'",
					"enum": ["ipc", "stdio", "socket", "pipe"]
				},
				"transportPort": {
					"type": "integer",
					"description": "Port number used when transport is 'socket'"
				},
				"cwd": {},
				"env": {},
				"enable": {},
				"disableDynamicRegister": {},
				"disableWorkspaceFolders": {},
				"disableSnippetCompletion": {},
				"disableDiagnostics": {},
				"disableCompletion": {},
				"formatterPriority": {},
				"rootPatterns": {},
				"requireRootPattern": {},
				"ignoredRootPaths": {},
				"filetypes": {},
				"additionalSchemes": {},
				"revealOutputChannelOn": {},
				"progressOnInitialization": {},
				"initializationOptions": {},
				"stdioEncoding": {},
				"settings": {},
				"trace.server": {}
			}
		},
		"languageServerCommand": {
			"type": "object",
			"required": ["command", "filetypes"],
			"allOf": [{
				"$ref": "#/definitions/languageServerBase"
			}],
			"additionalProperties": false,
			"properties": {
				"command": {
					"type": "string",
					"default": "",
					"description": "Executable in $PATH to start languageserver, should not used with module"
				},
				"args": {
					"type": "array",
					"default": [],
					"description": "Arguments of command",
					"items": {
						"type": "string"
					}
				},
				"detached": {
					"type": "boolean",
					"default": false,
					"description": "Detach the languageserver process"
				},
				"shell": {
					"type": "boolean",
					"default": false,
					"description": "Use shell for process"
				},
				"cwd": {},
				"env": {},
				"enable": {},
				"disableDynamicRegister": {},
				"disableWorkspaceFolders": {},
				"disableSnippetCompletion": {},
				"disableDiagnostics": {},
				"disableCompletion": {},
				"formatterPriority": {},
				"rootPatterns": {},
				"requireRootPattern": {},
				"ignoredRootPaths": {},
				"filetypes": {},
				"additionalSchemes": {},
				"revealOutputChannelOn": {},
				"progressOnInitialization": {},
				"initializationOptions": {},
				"stdioEncoding": {},
				"settings": {},
				"trace.server": {}
			}
		}
	},
	"properties": {
		"http.proxy": {
			"type": "string",
			"default": "",
			"pattern": "^https?://([^:]*(:[^@]*)?@)?([^:]+|\\[[:0-9a-fA-F]+\\])(:\\d+)?/?$|^$",
			"description": "The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables."
		},
		"http.proxyStrictSSL": {
			"type": "boolean",
			"description": "Controls whether the proxy server certificate should be verified against the list of supplied CAs",
			"default": true
		},
		"http.proxyAuthorization": {
			"type": ["null", "string"],
			"description": "The value to send as the `Proxy-Authorization` header for every network request.",
			"default": null
		},
		"http.proxyCA": {
			"type": "string",
			"description": "CA (file) to use as Certificate Authority",
			"default": null
		},
		"npm.binPath": {
			"type": "string",
			"default": "npm",
			"description": "Command or absolute path to npm or yarn."
		},
		"suggest.enablePreselect": {
			"type": "boolean",
			"description": "Enable preselect feature of LSP, only works on neovim",
			"default": false
		},
		"suggest.enablePreview": {
			"type": "boolean",
			"description": "Add preview option to completeopt, default: false.",
			"default": false
		},
		"suggest.floatEnable": {
			"type": "boolean",
			"description": "Enable floating window for documentation when possible.",
			"default": true
		},
		"suggest.floatConfig": {
			"type": "object",
			"description": "Configure style of documentation window for complete item.",
			"allOf": [{
				"$ref": "#/definitions/float"
			}],
			"additionalProperties": false,
			"properties": {
				"border": {},
				"highlight": {},
				"borderhighlight": {},
				"maxWidth": {},
				"winblend": {},
				"focusable": {},
				"shadow": {}
			}
		},
		"suggest.labelMaxLength": {
			"type": "number",
			"description": "Max length of abbr that shown as label of complete item.",
			"default": 200
		},
		"suggest.detailMaxLength": {
			"type": "number",
			"description": "Max length of detail that should be shown in popup menu.",
			"default": 100
		},
		"suggest.detailField": {
			"type": "string",
			"default": "preview",
			"description": "Where to show the detail text of CompleteItem from LS.",
			"enum": ["abbr", "menu", "preview"]
		},
		"suggest.autoTrigger": {
			"type": "string",
			"default": "always",
			"description": "How should completion be triggered",
			"enum": ["always", "trigger", "none"]
		},
		"suggest.languageSourcePriority": {
			"type": "number",
			"default": 99,
			"description": "Priority of language sources."
		},
		"suggest.numberSelect": {
			"type": "boolean",
			"description": "Input number to select complete item, works on neovim >= 0.4.0 only.",
			"default": false
		},
		"suggest.disableKind": {
			"type": "boolean",
			"description": "Remove kind field from vim complete item.",
			"default": false
		},
		"suggest.disableMenu": {
			"type": "boolean",
			"description": "Remove menu field from vim complete item.",
			"default": false
		},
		"suggest.disableMenuShortcut": {
			"type": "boolean",
			"description": "Disable shortcut of completion source in menu.",
			"default": false
		},
		"suggest.snippetIndicator": {
			"type": "string",
			"default": "~",
			"description": "The character used in abbr of complete item to indicate the item could be expand as snippet."
		},
		"suggest.maxCompleteItemCount": {
			"type": "number",
			"default": 50,
			"description": "Maximum number of complete items shown in vim"
		},
		"suggest.preferCompleteThanJumpPlaceholder": {
			"type": "boolean",
			"description": "Confirm completion instead of jump to next placeholder when completion is activated.",
			"default": false
		},
		"suggest.fixInsertedWord": {
			"type": "boolean",
			"description": "Make inserted word replace word characters after cursor position.",
			"default": true
		},
		"suggest.localityBonus": {
			"type": "boolean",
			"description": "Boost suggestions that appear closer to the cursor position.",
			"default": true
		},
		"suggest.triggerAfterInsertEnter": {
			"type": "boolean",
			"description": "Trigger completion after InsertEnter, auto trigger should be 'always' to enable this option",
			"default": false
		},
		"suggest.timeout": {
			"type": "integer",
			"default": 5000,
			"minimum": 500,
			"maximum": 15000,
			"description": "Timeout for completion, in miliseconds."
		},
		"suggest.minTriggerInputLength": {
			"type": "integer",
			"default": 1,
			"description": "Mininal input length for trigger completion, default 1"
		},
		"suggest.triggerCompletionWait": {
			"type": "integer",
			"default": 100,
			"minimum": 30,
			"maximum": 500,
			"description": "Wait time between text change and completion start, cancel completion when text changed during wait."
		},
		"suggest.echodocSupport": {
			"type": "boolean",
			"default": false,
			"description": "When enabled, add function signature to user_data.signature to support echodoc.vim"
		},
		"suggest.acceptSuggestionOnCommitCharacter": {
			"type": "boolean",
			"default": false,
			"description": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character. Requires CompleteChanged event to work."
		},
		"suggest.noselect": {
			"type": "boolean",
			"description": "Not make vim select first item on completion start",
			"default": true
		},
		"suggest.keepCompleteopt": {
			"type": "boolean",
			"description": "When enabled, completeopt is not overridden, auto completion will be disabled if completeopt doesn't have noinsert and noselect.",
			"default": false
		},
		"suggest.lowPrioritySourceLimit": {
			"type": "integer",
			"minimum": 1,
			"maximum": 100,
			"description": "Max items count for source priority lower than 90."
		},
		"suggest.highPrioritySourceLimit": {
			"type": "integer",
			"minimum": 1,
			"maximum": 100,
			"description": "Max items count for source priority bigger than or equal to 90."
		},
		"suggest.removeDuplicateItems": {
			"type": "boolean",
			"description": "Remove completion items with duplicated word for all sources, snippet items are excluded.",
			"default": false
		},
		"suggest.defaultSortMethod": {
			"type": "string",
			"description": "Default sorting behavior for suggested completion items.",
			"default": "length",
			"enum": ["length", "alphabetical", "none"]
		},
		"suggest.snippetsSupport": {
			"type": "boolean",
			"description": "Set to false to disable snippets support of completion.",
			"default": true
		},
		"suggest.completionItemKindLabels": {
			"type": "object",
			"default": {},
			"description": "Set custom labels to completion items' kinds.",
			"properties": {
				"text": {
					"type": "string"
				},
				"method": {
					"type": "string"
				},
				"function": {
					"type": "string"
				},
				"constructor": {
					"type": "string"
				},
				"field": {
					"type": "string"
				},
				"variable": {
					"type": "string"
				},
				"class": {
					"type": "string"
				},
				"interface": {
					"type": "string"
				},
				"module": {
					"type": "string"
				},
				"property": {
					"type": "string"
				},
				"unit": {
					"type": "string"
				},
				"value": {
					"type": "string"
				},
				"enum": {
					"type": "string"
				},
				"keyword": {
					"type": "string"
				},
				"snippet": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"file": {
					"type": "string"
				},
				"reference": {
					"type": "string"
				},
				"folder": {
					"type": "string"
				},
				"enumMember": {
					"type": "string"
				},
				"constant": {
					"type": "string"
				},
				"struct": {
					"type": "string"
				},
				"event": {
					"type": "string"
				},
				"operator": {
					"type": "string"
				},
				"typeParameter": {
					"type": "string"
				},
				"default": {
					"type": "string"
				}
			},
			"additionalProperties": false
		},
		"suggest.invalidInsertCharacters": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"description": "Invalid character for strip valid word when inserting text of complete item.",
			"default": [" ", "(", "<", "{", "[", "\r", "\n"]
		},
		"suggest.asciiCharactersOnly": {
			"type": "boolean",
			"description": "Suggest ASCII characters only",
			"default": false
		},
		"diagnostic.enable": {
			"type": "boolean",
			"description": "Set to false to disable diagnostic display",
			"default": true
		},
		"diagnostic.highlighLimit": {
			"type": "number",
			"description": "Limit count for highlighted diagnostics, too many diagnostic highlights could make vim stop responsing",
			"default": 1000
		},
		"diagnostic.autoRefresh": {
			"type": "boolean",
			"description": "Enable automatically refresh diagnostics, use diagnosticRefresh action when it's disabled.",
			"default": true
		},
		"diagnostic.level": {
			"type": "string",
			"description": "Used for filter diagnostics by diagnostic severity.",
			"default": "hint",
			"enum": ["hint", "information", "warning", "error"]
		},
		"diagnostic.locationlistUpdate": {
			"type": "boolean",
			"description": "Update locationlist on diagnostics change, only works with locationlist opened by :CocDiagnostics command and first window of associated buffer.",
			"default": true
		},
		"diagnostic.checkCurrentLine": {
			"type": "boolean",
			"description": "When enabled, show all diagnostics of current line if there are none at the current position.",
			"default": false
		},
		"diagnostic.messageTarget": {
			"type": "string",
			"description": "Diagnostic message target.",
			"default": "float",
			"enum": ["echo", "float"]
		},
		"diagnostic.messageDelay": {
			"type": "number",
			"description": "How long to wait (in milliseconds) before displaying the diagnostic message with echo or float",
			"default": 200
		},
		"diagnostic.refreshOnInsertMode": {
			"type": "boolean",
			"description": "Enable diagnostic refresh on insert mode, default false.",
			"default": false
		},
		"diagnostic.displayByAle": {
			"type": "boolean",
			"description": "Use Ale for display diagnostics in vim, will disable coc for display diagnostics, restart required on change.",
			"default": false
		},
		"diagnostic.virtualText": {
			"type": "boolean",
			"description": "Use NeoVim virtual text to display diagnostics",
			"default": false
		},
		"diagnostic.virtualTextCurrentLineOnly": {
			"type": "boolean",
			"description": "Only show virtualText diagnostic on current cursor line",
			"default": true
		},
		"diagnostic.virtualTextPrefix": {
			"type": "string",
			"description": "The prefix added virtual text diagnostics",
			"default": " "
		},
		"diagnostic.virtualTextLines": {
			"type": "number",
			"description": "The number of non empty lines from a diagnostic to display",
			"default": 3
		},
		"diagnostic.virtualTextLineSeparator": {
			"type": "string",
			"description": "The text that will mark a line end from the diagnostic message",
			"default": " \\ "
		},
		"diagnostic.enableSign": {
			"type": "boolean",
			"default": true,
			"description": "Enable signs for diagnostics."
		},
		"diagnostic.enableHighlightLineNumber": {
			"type": "boolean",
			"default": true,
			"description": "Enable highlighting line numbers for diagnostics, only works with neovim and diagnostic.enableSign is true."
		},
		"diagnostic.enableMessage": {
			"type": "string",
			"default": "always",
			"description": "When to enable show messages of diagnostics.",
			"enum": ["always", "jump", "never"]
		},
		"diagnostic.highlightOffset": {
			"type": "number",
			"description": "Offset number of buffer.addHighlight, neovim only.",
			"default": 1000
		},
		"diagnostic.signPriority": {
			"type": "number",
			"description": "Priority of diagnostic signs, default to 10",
			"default": 10
		},
		"diagnostic.errorSign": {
			"type": "string",
			"description": "Text of error sign",
			"default": ">>"
		},
		"diagnostic.warningSign": {
			"type": "string",
			"description": "Text of warning sign",
			"default": "⚠"
		},
		"diagnostic.infoSign": {
			"type": "string",
			"description": "Text of info sign",
			"default": ">>"
		},
		"diagnostic.hintSign": {
			"type": "string",
			"description": "Text of hint sign",
			"default": ">>"
		},
		"diagnostic.floatConfig": {
			"type": "object",
			"description": "Configure float window style of diagnostic message.",
			"allOf": [{
				"$ref": "#/definitions/float"
			}],
			"additionalProperties": false,
			"properties": {
				"border": {},
				"highlight": {},
				"borderhighlight": {},
				"title": {},
				"close": {},
				"maxHeight": {},
				"maxWidth": {},
				"winblend": {},
				"focusable": {},
				"shadow": {}
			}
		},
		"diagnostic.filetypeMap": {
			"type": "object",
			"description": "A map between buffer filetype and the filetype assigned to diagnostics. To syntax highlight diagnostics withs their parent buffer type use `\"default\": \"bufferType\"`",
			"default": {}
		},
		"diagnostic.format": {
			"type": "string",
			"description": "Define the diagnostic format that shown in float window or echoed, available parts: source, code, severity, message",
			"default": "[%source%code] [%severity] %message"
		},
		"diagnostic.separateRelatedInformationAsDiagnostics": {
			"type": "boolean",
			"default": false,
			"description": "Separate related information as diagnostics."
		},
		"diagnostic.showUnused": {
			"type": "boolean",
			"default": true,
			"description": "Show diagnostics with unused tag."
		},
		"diagnostic.showDeprecated": {
			"type": "boolean",
			"default": true,
			"description": "Show diagnostics with deprecated tag."
		},
		"signature.enable": {
			"type": "boolean",
			"description": "Enable signature help when trigger character typed, require restart service on change.",
			"default": true
		},
		"signature.triggerSignatureWait": {
			"type": "integer",
			"default": 500,
			"minimum": 200,
			"maximum": 1000,
			"description": "Timeout for trigger signature help, in miliseconds."
		},
		"signature.target": {
			"type": "string",
			"description": "Target of signature help, use float when possible by default.",
			"default": "float",
			"enum": ["float", "echo"]
		},
		"signature.floatConfig": {
			"type": "object",
			"description": "Configure float window style of signature documents.",
			"allOf": [{
				"$ref": "#/definitions/float"
			}],
			"additionalProperties": false,
			"properties": {
				"border": {},
				"highlight": {},
				"borderhighlight": {},
				"title": {},
				"close": {},
				"maxHeight": {},
				"maxWidth": {},
				"winblend": {},
				"focusable": {},
				"shadow": {}
			}
		},
		"signature.preferShownAbove": {
			"type": "boolean",
			"description": "Show signature help float window above cursor when possible, require restart service on change.",
			"default": true
		},
		"signature.hideOnTextChange": {
			"type": "boolean",
			"description": "Hide signature float window when text changed on insert mode.",
			"default": false
		},
		"codeLens.enable": {
			"type": "boolean",
			"description": "Enable codeLens feature, require neovim with set virtual text feature.",
			"default": false
		},
		"codeLens.separator": {
			"type": "string",
			"description": "Separator text for codeLens in virtual text",
			"default": "‣"
		},
		"codeLens.subseparator": {
			"type": "string",
			"description": "Subseparator between codeLenses in virtual text",
			"default": " "
		},
		"refactor.openCommand": {
			"type": "string",
			"description": "Open command for refactor window.",
			"default": "vsplit"
		},
		"refactor.saveToFile": {
			"type": "boolean",
			"description": "Save to file when write refactor buffer with ':noa wa' command, set to false if you want save buffer by yourself.",
			"default": true
		},
		"refactor.beforeContext": {
			"type": "number",
			"default": 3,
			"description": "Print num lines of leading context before each match."
		},
		"refactor.afterContext": {
			"type": "number",
			"default": 3,
			"description": "Print num lines of trailing context after each match."
		},
		"hover.target": {
			"type": "string",
			"description": "Target to show hover information, default is floating window when possible.",
			"enum": ["preview", "echo", "float"]
		},
		"hover.previewMaxHeight": {
			"type": "number",
			"default": 12,
			"description": "Max height of preview window for hover."
		},
		"hover.floatConfig": {
			"type": "object",
			"description": "Configure float window style of hover documents.",
			"allOf": [{
				"$ref": "#/definitions/float"
			}],
			"additionalProperties": false,
			"properties": {
				"border": {},
				"highlight": {},
				"borderhighlight": {},
				"title": {},
				"close": {},
				"maxHeight": {},
				"maxWidth": {},
				"winblend": {},
				"focusable": {},
				"shadow": {}
			}
		},
		"hover.autoHide": {
			"type": "boolean",
			"default": true,
			"description": "Automatically hide hover float window on CursorMove or InsertEnter."
		},
		"dialog.maxHeight": {
			"type": "number",
			"default": 20,
			"description": "Maximum height of dialog window."
		},
		"dialog.maxWidth": {
			"type": "number",
			"default": 80,
			"description": "Maximum width of dialog window."
		},
		"dialog.confirmKey": {
			"type": "string",
			"default": "<cr>",
			"description": "Confirm key for confirm selection used by menu and picker, you can always use <esc> to cancel."
		},
		"dialog.pickerButtons": {
			"type": "boolean",
			"default": true,
			"description": "Show buttons for picker dialog window/popup."
		},
		"dialog.pickerButtonShortcut": {
			"type": "boolean",
			"default": true,
			"description": "Show shortcut in buttons of picker dialog window/popup, used when dialog.pickerButtons is true."
		},
		"dialog.floatHighlight": {
			"type": ["string", "null"],
			"default": null,
			"description": "Highlight group for dialog window/popup, default to 'CocFloating'"
		},
		"dialog.floatBorderHighlight": {
			"type": ["string", "null"],
			"default": null,
			"description": "Highlight group for border of dialog window/popup, default to 'CocFloating'"
		},
		"notification.marginTop": {
			"type": "number",
			"default": 1,
			"description": "Margin top for notification dialog."
		},
		"notification.marginRight": {
			"type": "number",
			"default": 1,
			"description": "Margin right for notification dialog."
		},
		"notification.maxWidth": {
			"type": "number",
			"default": 60,
			"description": "Maximum content width of notification dialog."
		},
		"notification.maxHeight": {
			"type": "number",
			"default": 10,
			"description": "Maximum content height of notification dialog."
		},
		"notification.highlightGroup": {
			"type": "string",
			"default": "CocFloating",
			"description": "Highlight group of notification dialog."
		},
		"notification.minProgressWidth": {
			"type": "number",
			"default": 30,
			"description": "Minimum width of progress notification."
		},
		"workspace.ignoredFiletypes": {
			"type": "array",
			"default": ["markdown", "log", "txt", "help"],
			"description": "Filetypes that should be ignored for resolve workspace folder.",
			"items": {
				"type": "string"
			}
		},
		"workspace.bottomUpFiletypes": {
			"type": "array",
			"default": [],
			"description": "Filetypes that should have workspace folder should resolved from base directory of file.",
			"items": {
				"type": "string"
			}
		},
		"workspace.workspaceFolderCheckCwd": {
			"type": "boolean",
			"default": true,
			"description": "Whether the cwd directory should be checked first when resolving workspace folder."
		},
		"list.indicator": {
			"type": "string",
			"default": ">",
			"description": "The character used as first character in prompt line"
		},
		"list.alignColumns": {
			"type": "boolean",
			"default": false,
			"description": "Whether to align lists in columns, default: `false`"
		},
		"list.interactiveDebounceTime": {
			"type": "number",
			"default": 100,
			"description": "Debouce time for input change on interactive mode."
		},
		"list.height": {
			"type": "number",
			"default": 10,
			"description": "Height of split list window."
		},
		"list.statusLineSegments": {
			"type": ["array", "null"],
			"default": ["%#CocListMode#-- %{get(b:list_status, \"mode\", \"\")} --%*", "%{get(b:list_status, \"loading\", \"\")}", "%{get(b:list_status, \"args\", \"\")}", "(%L/%{get(b:list_status, \"total\", \"\")})", "%=", "%#CocListPath# %{get(b:list_status, \"cwd\", \"\")} %l/%L%*"],
			"items": {
				"types": "string"
			},
			"description": "An array of statusline segments that will be used to draw the status line for list windows."
		},
		"list.signOffset": {
			"type": "number",
			"default": 900,
			"description": "Sign offset of list, should be different from other plugins."
		},
		"list.selectedSignText": {
			"type": "string",
			"default": "*",
			"description": "Sign text for selected lines."
		},
		"list.extendedSearchMode": {
			"type": "boolean",
			"default": true,
			"description": "Enable extended search mode which allows multiple search patterns delimited by spaces."
		},
		"list.limitLines": {
			"type": "number",
			"default": 30000,
			"description": "Limit lines for list buffer."
		},
		"list.maxPreviewHeight": {
			"type": "number",
			"default": 12,
			"description": "Max height for preview window of list."
		},
		"list.previewSplitRight": {
			"type": "boolean",
			"default": false,
			"description": "Use vsplit for preview window."
		},
		"list.matchHighlightGroup": {
			"type": "string",
			"default": "Search",
			"description": "Highlight group used for matched texts in list window."
		},
		"list.previewHighlightGroup": {
			"type": "string",
			"default": "Search",
			"description": "Highlight group used for highlight the range in preview window."
		},
		"list.nextKeymap": {
			"type": "string",
			"default": "<C-j>",
			"description": "Key used for select next line on insert mode."
		},
		"list.previousKeymap": {
			"type": "string",
			"default": "<C-k>",
			"description": "Key used for select previous line on insert mode."
		},
		"list.normalMappings": {
			"type": "object",
			"default": {},
			"description": "Custom keymappings on normal mode."
		},
		"list.insertMappings": {
			"type": "object",
			"default": {},
			"description": "Custom keymappings on insert mode."
		},
		"list.source.diagnostics.includeCode": {
			"type": "boolean",
			"description": "Whether to show the diagnostic code in the list.",
			"default": true
		},
		"list.source.diagnostics.pathFormat": {
			"type": "string",
			"description": "Decide how the filepath is shown in the list.",
			"enum": ["full", "short", "filename", "hidden"],
			"default": "full"
		},
		"list.source.symbols.excludes": {
			"type": "array",
			"default": [],
			"description": "Patterns of minimatch for filepath to execlude from symbols list.",
			"items": {
				"type": "string"
			}
		},
		"list.source.outline.ctagsFilestypes": {
			"type": "array",
			"default": [],
			"description": "Filetypes that should use ctags for outline instead of language server.",
			"items": {
				"type": "string"
			}
		},
		"cursors.cancelKey": {
			"type": "string",
			"default": "<esc>",
			"description": "Key used for cancel cursors session."
		},
		"cursors.nextKey": {
			"type": "string",
			"default": "<C-n>",
			"description": "Key used for jump to next cursors position. "
		},
		"cursors.previousKey": {
			"type": "string",
			"default": "<C-p>",
			"description": "Key used for jump to previous cursors position."
		},
		"tree.closedIcon": {
			"type": "string",
			"default": "+",
			"description": "Closed icon of tree view."
		},
		"tree.openedIcon": {
			"type": "string",
			"default": "-",
			"description": "Opend icon of tree view."
		},
		"tree.key.toggleSelection": {
			"type": "string",
			"default": "<space>",
			"description": "Trigger key to select/unselect item"
		},
		"tree.key.toggle": {
			"type": "string",
			"default": "t",
			"description": "Trigger key to toggle expand state of tree node, does nothing with leaf node."
		},
		"tree.key.actions": {
			"type": "string",
			"default": "<tab>",
			"description": "Trigger key to invoke actions."
		},
		"tree.key.collapseAll": {
			"type": "string",
			"default": "M",
			"description": "Trigger key to collapse all tree node."
		},
		"tree.key.invoke": {
			"type": "string",
			"default": "<cr>",
			"description": "Trigger key to invoke default command of current node or selection."
		},
		"tree.key.close": {
			"type": "string",
			"default": "<esc>",
			"description": "Trigger key to dispose the tree and close tree window."
		},
		"tree.key.activeFilter": {
			"type": "string",
			"default": "f",
			"description": "Trigger key active filter."
		},
		"tree.key.selectNext": {
			"type": "string",
			"default": "<C-j>",
			"description": "Trigger key to select next item during filter."
		},
		"tree.key.selectPrevious": {
			"type": "string",
			"default": "<C-k>",
			"description": "Trigger key to select previous item during filter."
		},
		"outline.showLineNumber": {
			"type": "boolean",
			"default": true,
			"description": "Show line number of symbols."
		},
		"outline.splitCommand": {
			"type": "string",
			"default": "botright 30vs",
			"description": "Window split command used by outline."
		},
		"outline.followCursor": {
			"type": "boolean",
			"default": true,
			"description": "Reveal item in outline tree on cursor hold."
		},
		"outline.keepWindow": {
			"type": "boolean",
			"default": false,
			"description": "Jump back to original window after outline is shown."
		},
		"outline.sortBy": {
			"type": "string",
			"default": "category",
			"description": "Sort method for symbols.",
			"enum": ["position", "name", "category"]
		},
		"outline.expandLevel": {
			"type": "number",
			"default": 1,
			"description": "Expand level of tree nodes."
		},
		"outline.checkBufferSwitch": {
			"type": "boolean",
			"default": true,
			"description": "Recreate outline view after user changed to another buffer on current tab."
		},
		"outline.codeActionKinds": {
			"type": "array",
			"default": ["", "quickfix", "refactor"],
			"description": "Filter code actions in actions menu by kinds.",
			"items": {
				"type": "string",
				"enum": ["", "quickfix", "refactor", "source"]
			}
		},
		"callHierarchy.openCommand": {
			"type": "string",
			"default": "edit",
			"description": "Open command for callHierarchy tree view."
		},
		"callHierarchy.splitCommand": {
			"type": "string",
			"default": "botright 30vs",
			"description": "Window split command used by callHierarchy tree view."
		},
		"callHierarchy.enableTooltip": {
			"type": "boolean",
			"default": true,
			"description": "Enable tooltip to show relative filepath of call hierarchy."
		},
		"coc.preferences.enableMessageDialog": {
			"type": "boolean",
			"default": false,
			"description": "Enable messages shown in notification dialog."
		},
		"coc.preferences.maxFileSize": {
			"type": "string",
			"default": "10MB",
			"description": "Maximum file size in bytes that coc.nvim should handle, default '10MB'"
		},
		"coc.preferences.promptWorkspaceEdit": {
			"type": "boolean",
			"description": "Prompt confirm from user when apply workspace edit for unloaded files.",
			"default": true
		},
		"coc.preferences.listOfWorkspaceEdit": {
			"type": "string",
			"default": "quickfix",
			"description": "List should contains changed locations after workspace edit, default to vim's quickfix",
			"enum": ["quickfix", "location", "none"]
		},
		"coc.preferences.useQuickfixForLocations": {
			"type": "boolean",
			"description": "Use vim's quickfix list for jump locations,\n need restart on change.",
			"default": false
		},
		"coc.preferences.extensionUpdateCheck": {
			"type": "string",
			"default": "never",
			"description": "Interval for check extension update, could be daily, weekly, never",
			"enum": ["daily", "weekly", "never"]
		},
		"coc.preferences.snippetStatusText": {
			"type": "string",
			"default": "SNIP",
			"description": "Text shown in statusline to indicate snippet session is activated."
		},
		"coc.preferences.colorSupport": {
			"type": "boolean",
			"description": "Enable color highlight if language server support it.",
			"default": true
		},
		"coc.preferences.semanticTokensHighlights": {
			"type": "boolean",
			"description": "Enable semanticTokens highlight if language server support it.",
			"default": true
		},
		"coc.preferences.currentFunctionSymbolAutoUpdate": {
			"type": "boolean",
			"description": "Automatically update the value of b:coc_current_function on CursorHold event",
			"default": false
		},
		"coc.preferences.formatOnSaveFiletypes": {
			"type": "array",
			"default": [],
			"description": "Filetypes that should run format on save.",
			"items": {
				"type": "string"
			}
		},
		"coc.preferences.enableFloatHighlight": {
			"type": "boolean",
			"description": "Enable highlight for floating window.",
			"default": true
		},
		"coc.preferences.rootPatterns": {
			"type": "array",
			"default": [".git", ".hg", ".projections.json"],
			"description": "Root patterns to resolve workspaceFolder from parent folders of opened files, resolved from up to down.",
			"items": {
				"type": "string"
			}
		},
		"coc.preferences.watchmanPath": {
			"type": "string",
			"description": "executable path for https://facebook.github.io/watchman/, detected from $PATH by default",
			"default": null
		},
		"coc.preferences.jumpCommand": {
			"anyOf": [{
				"type": "string",
				"enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop", "pedit"]
			}, {
				"type": "string",
				"minimum": 1
			}],
			"description": "Command used for location jump, like goto definition, goto references etc. Can be also a custom command that gives file as an argument.",
			"default": "edit"
		},
		"coc.preferences.messageLevel": {
			"type": "string",
			"description": "Message level for filter echoed messages, could be 'more', 'warning' and 'error'",
			"default": "more",
			"enum": ["more", "warning", "error"]
		},
		"coc.preferences.bracketEnterImprove": {
			"type": "boolean",
			"description": "Improve enter inside bracket `<> {} [] ()` by add new empty line below and place cursor to it. Works with `coc#on_enter()`",
			"default": true
		},
		"coc.preferences.formatOnType": {
			"type": "boolean",
			"description": "Set to true to enable formatting on typing",
			"default": false
		},
		"coc.preferences.formatOnTypeFiletypes": {
			"type": "array",
			"default": [],
			"description": "Filetypes that should run format on typing. Only take effect when `coc.preferences.formatOnType` set `true`",
			"items": {
				"type": "string"
			}
		},
		"coc.preferences.floatActions": {
			"type": "boolean",
			"description": "Set to false to disable float/popup support for actions menu, won't work on vim without float or popup window support.",
			"default": true
		},
		"coc.preferences.promptInput": {
			"type": "boolean",
			"description": "Use prompt buffer in float window for user input.",
			"default": true
		},
		"coc.preferences.enableMarkdown": {
			"type": "boolean",
			"description": "Tell the language server that markdown text format is supported, note that markdown text may not rendered as expected.",
			"default": true
		},
		"coc.preferences.excludeImageLinksInMarkdownDocument": {
			"type": "boolean",
			"description": "Exclude image links from markdown text in float window.",
			"default": true
		},
		"coc.preferences.silentAutoupdate": {
			"type": "boolean",
			"description": "Not open split window with update status when performing auto update.",
			"default": true
		},
		"coc.preferences.willSaveHandlerTimeout": {
			"type": "integer",
			"default": 500,
			"minimum": 200,
			"maximum": 5000,
			"description": "Will save handler timeout"
		},
		"coc.source.around.enable": {
			"type": "boolean",
			"default": true
		},
		"coc.source.around.firstMatch": {
			"type": "boolean",
			"description": "Filter complete items by first letter strict match.",
			"default": true
		},
		"coc.source.around.shortcut": {
			"type": "string",
			"default": "A"
		},
		"coc.source.around.priority": {
			"type": "integer",
			"default": 1
		},
		"coc.source.around.disableSyntaxes": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			}
		},
		"coc.source.buffer.enable": {
			"type": "boolean",
			"default": true
		},
		"coc.source.buffer.shortcut": {
			"type": "string",
			"default": "B"
		},
		"coc.source.buffer.priority": {
			"type": "integer",
			"default": 1
		},
		"coc.source.buffer.firstMatch": {
			"type": "boolean",
			"description": "Filter complete items by first letter strict match.",
			"default": true
		},
		"coc.source.buffer.ignoreGitignore": {
			"type": "boolean",
			"default": true,
			"description": "Ignore git ignored files for buffer words"
		},
		"coc.source.buffer.disableSyntaxes": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			}
		},
		"coc.source.file.enable": {
			"type": "boolean",
			"default": true
		},
		"coc.source.file.shortcut": {
			"type": "string",
			"default": "F"
		},
		"coc.source.file.priority": {
			"type": "integer",
			"default": 10
		},
		"coc.source.file.disableSyntaxes": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			}
		},
		"coc.source.file.triggerCharacters": {
			"type": "array",
			"default": ["/", "\\"],
			"items": {
				"type": "string"
			}
		},
		"coc.source.file.trimSameExts": {
			"type": "array",
			"default": [".ts", ".js"],
			"description": "Trim same extension on file completion",
			"items": {
				"type": "string"
			}
		},
		"coc.source.file.ignoreHidden": {
			"type": "boolean",
			"default": true,
			"description": "Ignore completion for hidden files"
		},
		"coc.source.file.ignorePatterns": {
			"type": "array",
			"default": [],
			"description": "Ignore patterns of matcher",
			"items": {
				"type": "string"
			}
		},
		"languageserver": {
			"type": "object",
			"default": {},
			"description": "Dictionary of languageservers, key is used as id of languageserver.",
			"patternProperties": {
				"^[_a-zA-Z]+$": {
					"oneOf": [{
						"$ref": "#/definitions/languageServerModule"
					}, {
						"$ref": "#/definitions/languageServerCommand"
					}, {
						"$ref": "#/definitions/languageServerSocket"
					}]
				}
			}
		},
		"list.source.links.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"links\" list."
		},
		"list.source.links.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"links\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.links.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"links\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.location.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"location\" list."
		},
		"list.source.location.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"location\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.location.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"location\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.symbols.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"symbols\" list."
		},
		"list.source.symbols.defaultOptions": {
			"type": "array",
			"default": ["--interactive"],
			"description": "Default list options of \"symbols\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.symbols.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"symbols\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.outline.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"outline\" list."
		},
		"list.source.outline.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"outline\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.outline.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"outline\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.commands.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"commands\" list."
		},
		"list.source.commands.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"commands\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.commands.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"commands\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.extensions.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"extensions\" list."
		},
		"list.source.extensions.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"extensions\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.extensions.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"extensions\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.diagnostics.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"diagnostics\" list."
		},
		"list.source.diagnostics.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"diagnostics\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.diagnostics.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"diagnostics\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.sources.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"sources\" list."
		},
		"list.source.sources.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"sources\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.sources.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"sources\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.services.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"services\" list."
		},
		"list.source.services.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"services\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.services.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"services\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.lists.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"lists\" list."
		},
		"list.source.lists.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"lists\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.lists.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"lists\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"list.source.folders.defaultAction": {
			"type": "string",
			"default": null,
			"description": "Default default action of \"folders\" list."
		},
		"list.source.folders.defaultOptions": {
			"type": "array",
			"default": [],
			"description": "Default list options of \"folders\" list, only used when both list option and argument are empty.",
			"uniqueItems": true,
			"items": {
				"type": "string",
				"enum": ["--top", "--normal", "--no-sort", "--input", "--tab", "--strict", "--regex", "--ignore-case", "--number-select", "--interactive", "--auto-preview", "--first", "--no-quit"]
			}
		},
		"list.source.folders.defaultArgs": {
			"type": "array",
			"default": [],
			"description": "Default argument list of \"folders\" list, only used when list argument is empty.",
			"uniqueItems": true,
			"items": {
				"type": "string"
			}
		},
		"jedi.enable": {
			"type": "boolean",
			"default": true,
			"description": "Enable/disable jedi-language-server."
		},
		"jedi.startupMessage": {
			"type": "boolean",
			"default": false,
			"description": "Enable/disable jedi-language-server's message on startup"
		},
		"jedi.markupKindPreferred": {
			"type": "string",
			"enum": ["markdown", "plaintext"],
			"description": "The preferred MarkupKind for jedi-language-server messages. If omitted, defaults to client preferences"
		},
		"jedi.trace.server": {
			"type": "string",
			"default": "off",
			"enum": ["off", "messages", "verbose"],
			"description": "Trace level of jedi-language-server"
		},
		"jedi.jediSettings.autoImportModules": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Modules that will not be analyzed but imported. Improves autocompletion but loses goto definition"
		},
		"jedi.jediSettings.caseInsensitiveCompletion": {
			"type": "boolean",
			"default": true,
			"description": "Completions are by default case insensitive."
		},
		"jedi.jediSettings.debug": {
			"type": "boolean",
			"default": false,
			"description": "Enable jedi.set_debug_function, which prints Jedi debugging messages to stdout."
		},
		"jedi.executable.command": {
			"type": "string",
			"description": "The jedi-language-server executable. If omitted, coc-managed default is used"
		},
		"jedi.executable.args": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Args passed to jedi-language-server executable. Ignored if command is null"
		},
		"jedi.codeAction.nameExtractFunction": {
			"type": "string",
			"default": "jls_extract_def",
			"description": "Function name generated by the 'extract_function' codeAction"
		},
		"jedi.codeAction.nameExtractVariable": {
			"type": "string",
			"default": "jls_extract_var",
			"description": "Variable name generated by the 'extract_variable' codeAction"
		},
		"jedi.completion.disableSnippets": {
			"type": "boolean",
			"default": false,
			"description": "Enable (or disable) diagnostics provided by Jedi"
		},
		"jedi.completion.resolveEagerly": {
			"type": "boolean",
			"default": false,
			"description": "Return all completion results in initial completion request"
		},
		"jedi.completion.ignorePatterns": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "A list of regular expressions. If any regular expression matches a completion, that completion is not returned to the client."
		},
		"jedi.diagnostics.enable": {
			"type": "boolean",
			"default": true,
			"description": "Enable (or disable) diagnostics provided by Jedi"
		},
		"jedi.diagnostics.didOpen": {
			"type": "boolean",
			"default": true,
			"description": "Run diagnostics on document open"
		},
		"jedi.diagnostics.didChange": {
			"type": "boolean",
			"default": true,
			"description": "Run diagnostics on in-memory document change"
		},
		"jedi.diagnostics.didSave": {
			"type": "boolean",
			"default": true,
			"description": "Run diagnostics on document save (to disk)"
		},
		"jedi.hover.enable": {
			"type": "boolean",
			"default": true,
			"description": "Enable (or disable) all hover text."
		},
		"jedi.hover.disable.class.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.class.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.class.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.function.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.function.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.function.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.instance.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.instance.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.instance.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.keyword.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.keyword.names": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.keyword.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.module.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.module.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.module.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.param.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.param.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.param.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.path.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.path.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.path.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.property.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.property.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.property.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.hover.disable.statement.all": {
			"type": "boolean",
			"default": false,
			"description": "Disable all hover text of type specified."
		},
		"jedi.hover.disable.statement.names": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by name in list of type specified."
		},
		"jedi.hover.disable.statement.fullNames": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Disable hover text identified by the fully qualified name in list of type specified."
		},
		"jedi.workspace.extraPaths": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Add additional paths for Jedi's analysis. Useful with vendor directories, packages in a non-standard location, etc."
		},
		"jedi.workspace.symbols.maxSymbols": {
			"type": "number",
			"default": 20,
			"description": "Maximum number of symbols returned by a call to `workspace/symbols`"
		},
		"jedi.workspace.symbols.ignoreFolders": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [".nox", ".tox", ".venv", "__pycache__", "venv"],
			"description": "Performance optimization that sets names of folders that are ignored for the workspace symbols action."
		},
		"json.enable": {
			"type": "boolean",
			"default": true,
			"description": "Enable json server"
		},
		"json.trace.server": {
			"type": "string",
			"default": "off",
			"enum": ["off", "messages", "verbose"]
		},
		"json.execArgv": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			}
		},
		"json.format.enable": {
			"type": "boolean",
			"default": true,
			"description": "Enable format for json server"
		},
		"json.maxItemsComputed": {
			"type": "number",
			"default": 5000,
			"description": "The maximum number of outline symbols and folding regions computed (limited for performance reasons)."
		},
		"json.schemaDownload.enable": {
			"type": "boolean",
			"default": true,
			"description": "When enabled, JSON schemas can be fetched from http and https locations.",
			"tags": ["usesOnlineServices"]
		},
		"json.schemas": {
			"type": "array",
			"scope": "resource",
			"description": "Schemas associations for json files",
			"default": [],
			"items": {
				"type": "object",
				"default": {
					"fileMatch": ["/my-file"],
					"url": "schemaURL"
				},
				"properties": {
					"url": {
						"type": "string",
						"default": "/user.schema.json"
					},
					"fileMatch": {
						"type": "array",
						"items": {
							"type": "string",
							"default": "MyFile.json"
						},
						"minItems": 1,
						"description": "File pattern to match."
					},
					"schema": {
						"$ref": "http://json-schema.org/draft-04/schema#",
						"description": "Url of json schema, support file/url protocol."
					}
				}
			}
		},
		"python.autoComplete.addBrackets": {
			"type": "boolean",
			"default": false,
			"description": "Automatically add brackets for functions.",
			"scope": "resource"
		},
		"python.autoComplete.extraPaths": {
			"type": "array",
			"default": [],
			"description": "List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
			"scope": "resource"
		},
		"python.autoComplete.showAdvancedMembers": {
			"type": "boolean",
			"default": true,
			"description": "Controls appearance of methods with double underscores in the completion list.",
			"scope": "resource"
		},
		"python.jediShortcut": {
			"type": "string",
			"description": "Shortcut used for jedi completion.",
			"default": "JD",
			"scope": "resource"
		},
		"python.autoComplete.typeshedPaths": {
			"type": "array",
			"items": {
				"type": "string"
			},
			"default": [],
			"description": "Specifies paths to local typeshed repository clone(s) for the Python language server.",
			"scope": "resource"
		},
		"python.autoUpdateLanguageServer": {
			"type": "boolean",
			"default": true,
			"description": "Automatically update the language server.",
			"scope": "application"
		},
		"python.disableInstallationCheck": {
			"type": "boolean",
			"default": false,
			"description": "Whether to check if Python is installed (also warn when using the macOS-installed Python).",
			"scope": "resource"
		},
		"python.envFile": {
			"type": "string",
			"description": "Absolute path to a file containing environment variable definitions.",
			"default": "${workspaceFolder}/.env",
			"scope": "resource"
		},
		"python.trace.server": {
			"type": "string",
			"default": "off",
			"enum": ["off", "messages", "verbose"],
			"description": "Trace level of tsserver"
		},
		"python.formatting.autopep8Args": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.formatting.autopep8Path": {
			"type": "string",
			"default": "autopep8",
			"description": "Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.formatting.provider": {
			"type": "string",
			"default": "autopep8",
			"description": "Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.",
			"enum": ["autopep8", "black", "yapf", "none"],
			"scope": "resource"
		},
		"python.formatting.blackArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.formatting.blackPath": {
			"type": "string",
			"default": "black",
			"description": "Path to Black, you can use a custom version of Black by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.formatting.yapfArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.formatting.yapfPath": {
			"type": "string",
			"default": "yapf",
			"description": "Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.globalModuleInstallation": {
			"type": "boolean",
			"default": false,
			"description": "Whether to install Python modules globally when not using an environment.",
			"scope": "resource"
		},
		"python.jediEnabled": {
			"type": "boolean",
			"default": true,
			"description": "Enables Jedi as IntelliSense engine instead of Microsoft Python Analysis Engine.",
			"scope": "resource"
		},
		"python.jediMemoryLimit": {
			"type": "number",
			"default": 0,
			"description": "Memory limit for the Jedi completion engine in megabytes. Zero (default) means 1024 MB. -1 means unlimited (disable memory limit check)",
			"scope": "resource"
		},
		"python.jediPath": {
			"type": "string",
			"default": "",
			"description": "Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).",
			"scope": "resource"
		},
		"python.analysis.downloadChannel": {
			"type": "string",
			"enum": ["stable", "beta", "daily"],
			"default": "stable",
			"description": "Defines how to down MPLS, use beta for beta version, or daily for upgrade to stable when possible, stable means MPLS only upgraded when coc-python upgraded."
		},
		"python.analysis.openFilesOnly": {
			"type": "boolean",
			"default": true,
			"description": "Only show errors and warnings for open files rather than for the entire workspace.",
			"scope": "resource"
		},
		"python.analysis.diagnosticEnabled": {
			"type": "boolean",
			"default": true,
			"description": "Enable diagnostic support of language server.",
			"scope": "resource"
		},
		"python.analysis.diagnosticPublishDelay": {
			"type": "integer",
			"default": 1000,
			"description": "Delay before diagnostic messages are transferred to the problems list (in milliseconds).",
			"scope": "resource"
		},
		"python.analysis.typeshedPaths": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "Paths to look for typeshed modules.",
			"scope": "resource"
		},
		"python.analysis.errors": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "List of diagnostics messages to be shown as errors.",
			"scope": "resource"
		},
		"python.analysis.warnings": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "List of diagnostics messages to be shown as warnings.",
			"scope": "resource"
		},
		"python.analysis.information": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "List of diagnostics messages to be shown as information.",
			"scope": "resource"
		},
		"python.analysis.disabled": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			},
			"description": "List of suppressed diagnostic messages.",
			"scope": "resource"
		},
		"python.analysis.logLevel": {
			"type": "string",
			"enum": ["Error", "Warning", "Information", "Trace"],
			"default": "Error",
			"description": "Defines type of log messages language server writes into the output window.",
			"scope": "resource"
		},
		"python.analysis.symbolsHierarchyDepthLimit": {
			"type": "integer",
			"default": 10,
			"description": "Limits depth of the symbol tree in the document outline.",
			"scope": "resource"
		},
		"python.linting.enabled": {
			"type": "boolean",
			"default": true,
			"description": "Whether to lint Python files.",
			"scope": "resource"
		},
		"python.linting.flake8Args": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.flake8CategorySeverity.E": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Flake8 message type 'E'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.flake8CategorySeverity.F": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Flake8 message type 'F'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.flake8CategorySeverity.W": {
			"type": "string",
			"default": "Warning",
			"description": "Severity of Flake8 message type 'W'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.flake8Enabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using flake8",
			"scope": "resource"
		},
		"python.linting.flake8Path": {
			"type": "string",
			"default": "flake8",
			"description": "Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.ignorePatterns": {
			"type": "array",
			"description": "Patterns used to exclude files or folders from being linted.",
			"default": [".vscode/*.py", "**/site-packages/**/*.py"],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.lintOnSave": {
			"type": "boolean",
			"default": true,
			"description": "Whether to lint Python files when saved.",
			"scope": "resource"
		},
		"python.linting.maxNumberOfProblems": {
			"type": "number",
			"default": 100,
			"description": "Controls the maximum number of problems produced by the server.",
			"scope": "resource"
		},
		"python.linting.banditArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.banditEnabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using bandit.",
			"scope": "resource"
		},
		"python.linting.banditPath": {
			"type": "string",
			"default": "bandit",
			"description": "Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.mypyArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": ["--ignore-missing-imports", "--follow-imports=silent", "--show-column-numbers"],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.mypyCategorySeverity.error": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Mypy message type 'Error'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.mypyCategorySeverity.note": {
			"type": "string",
			"default": "Information",
			"description": "Severity of Mypy message type 'Note'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.mypyEnabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using mypy.",
			"scope": "resource"
		},
		"python.linting.mypyPath": {
			"type": "string",
			"default": "mypy",
			"description": "Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.pep8Args": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.pep8CategorySeverity.E": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Pep8 message type 'E'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pep8CategorySeverity.W": {
			"type": "string",
			"default": "Warning",
			"description": "Severity of Pep8 message type 'W'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pep8Enabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using pep8",
			"scope": "resource"
		},
		"python.linting.pep8Path": {
			"type": "string",
			"default": "pep8",
			"description": "Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.prospectorArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.prospectorEnabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using prospector.",
			"scope": "resource"
		},
		"python.linting.prospectorPath": {
			"type": "string",
			"default": "prospector",
			"description": "Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.pydocstyleArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.pydocstyleEnabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using pydocstyle",
			"scope": "resource"
		},
		"python.linting.pydocstylePath": {
			"type": "string",
			"default": "pydocstyle",
			"description": "Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.pylamaArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.pylamaEnabled": {
			"type": "boolean",
			"default": false,
			"description": "Whether to lint Python files using pylama.",
			"scope": "resource"
		},
		"python.linting.pylamaPath": {
			"type": "string",
			"default": "pylama",
			"description": "Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.pylintArgs": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.linting.pylintCategorySeverity.convention": {
			"type": "string",
			"default": "Information",
			"description": "Severity of Pylint message type 'Convention/C'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pylintCategorySeverity.error": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Pylint message type 'Error/E'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pylintCategorySeverity.fatal": {
			"type": "string",
			"default": "Error",
			"description": "Severity of Pylint message type 'Fatal/F'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pylintCategorySeverity.refactor": {
			"type": "string",
			"default": "Hint",
			"description": "Severity of Pylint message type 'Refactor/R'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pylintCategorySeverity.warning": {
			"type": "string",
			"default": "Warning",
			"description": "Severity of Pylint message type 'Warning/W'.",
			"enum": ["Hint", "Error", "Information", "Warning"],
			"scope": "resource"
		},
		"python.linting.pylintEnabled": {
			"type": "boolean",
			"default": true,
			"description": "Whether to lint Python files using pylint.",
			"scope": "resource"
		},
		"python.linting.pylintPath": {
			"type": "string",
			"default": "pylint",
			"description": "Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.linting.pylintUseMinimalCheckers": {
			"type": "boolean",
			"default": true,
			"description": "Whether to run Pylint with minimal set of rules.",
			"scope": "resource"
		},
		"python.pythonPath": {
			"type": "string",
			"default": "python",
			"description": "Path to Python, you can use a custom version of Python by modifying this setting to include the full path.",
			"scope": "resource"
		},
		"python.condaPath": {
			"type": "string",
			"default": "",
			"description": "Path to the conda executable to use for activation (version 4.4+).",
			"scope": "resource"
		},
		"python.pipenvPath": {
			"type": "string",
			"default": "pipenv",
			"description": "Path to the pipenv executable to use for activation.",
			"scope": "resource"
		},
		"python.poetryPath": {
			"type": "string",
			"default": "poetry",
			"description": "Path to the poetry executable.",
			"scope": "resource"
		},
		"python.sortImports.args": {
			"type": "array",
			"description": "Arguments passed in. Each argument is a separate item in the array.",
			"default": [],
			"items": {
				"type": "string"
			},
			"scope": "resource"
		},
		"python.sortImports.path": {
			"type": "string",
			"description": "Path to isort script, default using inner version",
			"default": "",
			"scope": "resource"
		},
		"python.terminal.activateEnvironment": {
			"type": "boolean",
			"default": true,
			"description": "Activate Python Environment in Terminal created using the Extension.",
			"scope": "resource"
		},
		"python.terminal.executeInFileDir": {
			"type": "boolean",
			"default": false,
			"description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
			"scope": "resource"
		},
		"python.terminal.launchArgs": {
			"type": "array",
			"default": [],
			"description": "Python launch arguments to use when executing a file in the terminal.",
			"scope": "resource"
		},
		"python.venvFolders": {
			"type": "array",
			"default": ["envs", ".pyenv", ".direnv"],
			"description": "Folders in your home directory to look into for virtual environments.",
			"scope": "resource",
			"items": {
				"type": "string"
			}
		},
		"python.venvPath": {
			"type": "string",
			"default": "",
			"description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).",
			"scope": "resource"
		},
		"python.workspaceSymbols.ctagsPath": {
			"type": "string",
			"default": "ctags",
			"description": "Fully qualified path to the ctags executable (else leave as ctags, assuming it is in current path).",
			"scope": "resource"
		},
		"python.workspaceSymbols.enabled": {
			"type": "boolean",
			"default": true,
			"description": "Set to 'false' to disable Workspace Symbol provider using ctags.",
			"scope": "resource"
		},
		"python.workspaceSymbols.exclusionPatterns": {
			"type": "array",
			"default": ["**/site-packages/**"],
			"items": {
				"type": "string"
			},
			"description": "Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.",
			"scope": "resource"
		},
		"python.workspaceSymbols.rebuildOnFileSave": {
			"type": "boolean",
			"default": true,
			"description": "Whether to re-build the tags file on when changes made to python files are saved.",
			"scope": "resource"
		},
		"python.workspaceSymbols.rebuildOnStart": {
			"type": "boolean",
			"default": true,
			"description": "Whether to re-build the tags file on start (defaults to true).",
			"scope": "resource"
		},
		"python.workspaceSymbols.tagFilePath": {
			"type": "string",
			"default": "${workspaceFolder}/.vscode/tags",
			"description": "Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.",
			"scope": "resource"
		},
		"coc.source.neco.enable": {
			"type": "boolean",
			"default": true
		},
		"coc.source.neco.firstMatch": {
			"type": "boolean",
			"default": false
		},
		"coc.source.neco.triggerCharacters": {
			"type": "number",
			"default": []
		},
		"coc.source.neco.priority": {
			"type": "number",
			"default": 9
		},
		"coc.source.neco.shortcut": {
			"type": "string",
			"default": "NEC",
			"description": "Shortcut text shown in complete menu."
		},
		"coc.source.neco.disableSyntaxes": {
			"type": "array",
			"default": [],
			"items": {
				"type": "string"
			}
		},
		"coc.source.neco.filetypes": {
			"type": "array",
			"default": ["vim"],
			"description": "Enabled filetypes.",
			"items": {
				"type": "string"
			}
		}
	}
}